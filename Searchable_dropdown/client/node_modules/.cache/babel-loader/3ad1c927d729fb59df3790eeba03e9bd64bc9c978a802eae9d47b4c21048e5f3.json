{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\mini_projects\\\\Searchable_dropdown\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport \"./app.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectOption, setSelectOption] = useState(null);\n  const [options, setOptions] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  useEffect(() => {\n    // Fetch options from the API based on inputValue\n    if (inputValue) {\n      fetchOptionsFromAPI(inputValue).then(data => {\n        // Filter options to match the beginning of the labels\n        const filteredOptions = data.filter(option => option.label.toLowerCase().startsWith(inputValue.toLowerCase()));\n        setOptions(filteredOptions);\n      });\n    } else {\n      setOptions([]); // Clear options when inputValue is empty\n    }\n  }, [inputValue]);\n  const handleInputChange = value => {\n    setInputValue(value);\n  };\n  const handleSelectChange = selectedOption => {\n    setSelectOption(selectedOption);\n  };\n  const fetchOptionsFromAPI = async input => {\n    // Make an API request to fetch options based on input\n    try {\n      const response = await fetch(`/api/options?input=${input}`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error(\"Error fetching options:\", error);\n      return [];\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Select, {\n      options: options,\n      value: selectOption,\n      onChange: handleSelectChange,\n      onInputChange: handleInputChange,\n      isSearchable: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"g3uZBNvbzwuVAf5M4NF5uhrgSvw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Select","jsxDEV","_jsxDEV","App","_s","selectOption","setSelectOption","options","setOptions","inputValue","setInputValue","fetchOptionsFromAPI","then","data","filteredOptions","filter","option","label","toLowerCase","startsWith","handleInputChange","value","handleSelectChange","selectedOption","input","response","fetch","json","error","console","className","children","onChange","onInputChange","isSearchable","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/mini_projects/Searchable_dropdown/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport \"./app.css\";\n\nconst App = () => {\n  const [selectOption, setSelectOption] = useState(null);\n  const [options, setOptions] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n\n  useEffect(() => {\n    // Fetch options from the API based on inputValue\n    if (inputValue) {\n      fetchOptionsFromAPI(inputValue).then((data) => {\n        // Filter options to match the beginning of the labels\n        const filteredOptions = data.filter(option =>\n          option.label.toLowerCase().startsWith(inputValue.toLowerCase())\n        );\n        setOptions(filteredOptions);\n      });\n    } else {\n      setOptions([]); // Clear options when inputValue is empty\n    }\n  }, [inputValue]);\n\n  const handleInputChange = (value) => {\n    setInputValue(value);\n  };\n\n  const handleSelectChange = (selectedOption) => {\n    setSelectOption(selectedOption);\n  };\n\n  const fetchOptionsFromAPI = async (input) => {\n    // Make an API request to fetch options based on input\n    try {\n      const response = await fetch(`/api/options?input=${input}`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error(\"Error fetching options:\", error);\n      return [];\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Select\n        options={options}\n        value={selectOption}\n        onChange={handleSelectChange}\n        onInputChange={handleInputChange}\n        isSearchable={true}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,cAAc;AACjC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd;IACA,IAAIU,UAAU,EAAE;MACdE,mBAAmB,CAACF,UAAU,CAAC,CAACG,IAAI,CAAEC,IAAI,IAAK;QAC7C;QACA,MAAMC,eAAe,GAAGD,IAAI,CAACE,MAAM,CAACC,MAAM,IACxCA,MAAM,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,UAAU,CAACV,UAAU,CAACS,WAAW,CAAC,CAAC,CAChE,CAAC;QACDV,UAAU,CAACM,eAAe,CAAC;MAC7B,CAAC,CAAC;IACJ,CAAC,MAAM;MACLN,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;IAClB;EACF,CAAC,EAAE,CAACC,UAAU,CAAC,CAAC;EAEhB,MAAMW,iBAAiB,GAAIC,KAAK,IAAK;IACnCX,aAAa,CAACW,KAAK,CAAC;EACtB,CAAC;EAED,MAAMC,kBAAkB,GAAIC,cAAc,IAAK;IAC7CjB,eAAe,CAACiB,cAAc,CAAC;EACjC,CAAC;EAED,MAAMZ,mBAAmB,GAAG,MAAOa,KAAK,IAAK;IAC3C;IACA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,sBAAqBF,KAAM,EAAC,CAAC;MAC3D,MAAMX,IAAI,GAAG,MAAMY,QAAQ,CAACE,IAAI,CAAC,CAAC;MAClC,OAAOd,IAAI;IACb,CAAC,CAAC,OAAOe,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAO,EAAE;IACX;EACF,CAAC;EAED,oBACE1B,OAAA;IAAK4B,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClB7B,OAAA,CAACF,MAAM;MACLO,OAAO,EAAEA,OAAQ;MACjBc,KAAK,EAAEhB,YAAa;MACpB2B,QAAQ,EAAEV,kBAAmB;MAC7BW,aAAa,EAAEb,iBAAkB;MACjCc,YAAY,EAAE;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAClC,EAAA,CAnDID,GAAG;AAAAoC,EAAA,GAAHpC,GAAG;AAqDT,eAAeA,GAAG;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}